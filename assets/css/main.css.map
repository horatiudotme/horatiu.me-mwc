{"version":3,"sources":["../../node_modules/@material/typography/_mixins.scss","../../node_modules/@material/theme/_css.scss","css/main.scss"],"names":[],"mappings":"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","file":"main.css","sourceRoot":"../../src/_assets","sourcesContent":["//\n// Copyright 2017 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n@use \"sass:list\";\n@use \"sass:map\";\n@use \"sass:string\";\n@use \"@material/feature-targeting/functions\" as feature-targeting-functions;\n@use \"@material/feature-targeting/mixins\" as feature-targeting-mixins;\n@use \"@material/theme/mixins\" as theme-mixins;\n@use \"./variables\";\n\n@mixin core-styles($query: feature-targeting-functions.all()) {\n  .mdc-typography {\n    @include base($query: $query);\n  }\n\n  @each $style in map.keys(variables.$styles) {\n    .mdc-typography--#{$style} {\n      @include typography($style, $query: $query);\n    }\n  }\n}\n\n@mixin base($query: feature-targeting-functions.all()) {\n  $feat-typography: feature-targeting-functions.create-target(\n    $query,\n    typography\n  );\n\n  @include smooth-font($query: $query);\n  @include feature-targeting-mixins.targets($feat-typography) {\n    @include theme-mixins.prop(\n      font-family,\n      (\n        varname: --mdc-typography-font-family,\n        fallback: map.get(variables.$base, 'font-family'),\n      )\n    );\n  }\n}\n\n@mixin typography(\n  $style,\n  $query: feature-targeting-functions.all(),\n  $exclude-props: ()\n) {\n  $feat-typography: feature-targeting-functions.create-target(\n    $query,\n    typography\n  );\n  $style-props: map.get(variables.$styles, $style);\n\n  @if not map.has-key(variables.$styles, $style) {\n    @error \"Invalid style specified! #{$style} doesn't exist. Choose one of #{map.keys(variables.$styles)}\";\n  }\n\n  @include smooth-font($query: $query);\n  @include feature-targeting-mixins.targets($feat-typography) {\n    @each $key, $value in $style-props {\n      @if list.index($exclude-props, $key) == null {\n        $fallback: $value;\n        @if $key == 'font-family' {\n          // Each style has its own font-family custom property, but should\n          // fallback to a generic font-family property. This allows\n          // customizing the font-family for all styles or only specific ones.\n          $fallback: (\n            varname: --mdc-typography-font-family,\n            fallback: $fallback,\n          );\n        }\n\n        @include theme-mixins.prop(\n          $key,\n          (\n            varname: --mdc-typography-#{$style}-#{$key},\n            fallback: $fallback,\n          )\n        );\n      }\n    }\n  }\n}\n\n/// Applies antialiasing via font-smoothing to text.\n@mixin smooth-font($query: feature-targeting-functions.all()) {\n  $feat-typography: feature-targeting-functions.create-target(\n    $query,\n    typography\n  );\n\n  @include feature-targeting-mixins.targets($feat-typography) {\n    -moz-osx-font-smoothing: grayscale;\n    -webkit-font-smoothing: antialiased;\n  }\n}\n\n// Element must be `display: block` or `display: inline-block` for this to work.\n@mixin overflow-ellipsis($query: feature-targeting-functions.all()) {\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    overflow: hidden;\n  }\n}\n\n/// Sets a container's baseline that text content will align to.\n///\n/// If the `$display` is set to a flexbox display, only `$top` baseline may be\n/// set. A separate element must be added as a child of the container with a\n/// `$bottom` baseline.\n///\n/// @param {Number} $top - the distance from the top of the container to the\n///     text's baseline.\n/// @param {Number} $bottom - the distance from the text's baseline to the\n///     bottom of the container.\n/// @param {String} $display - the display type of the container. May be `flex`,\n///     `inline-flex`, `block`, or `inline-block`.\n@mixin baseline(\n  $top: 0,\n  $bottom: 0,\n  $display: block,\n  $query: feature-targeting-functions.all()\n) {\n  $validDisplayTypes: (flex, inline-flex, block, inline-block);\n\n  @if list.index($validDisplayTypes, $display) == null {\n    @error \"mdc-typography: invalid display specified! #{$display} must be one of #{$validDisplayTypes}\";\n  }\n\n  $isFlexbox: $display == 'flex' or $display == 'inline-flex';\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    display: $display;\n\n    @if $isFlexbox {\n      align-items: baseline;\n    }\n  }\n\n  @if $top > 0 {\n    @include baseline-top($top, $query: $query);\n  }\n\n  @if $bottom > 0 {\n    @if $isFlexbox {\n      @error \"mdc-typography: invalid baseline with display type. #{$display} cannot specifiy $bottom. Add a separate child element with its own $bottom.\";\n    }\n\n    @include baseline-bottom($bottom, $query: $query);\n  }\n}\n\n/// Sets the baseline of flow text content.\n///\n/// Separate `$top` and `$bottom` baselines may be specified. You should ensure\n/// that the `$top` baseline matches the previous text content's $bottom\n/// baseline to ensure text is positioned appropriately.\n///\n/// See go/css-baseline for reference on how this mixin works.\n///\n/// This is intended for text flow content only (e.g. `<h1>`, `<p>`, `<span>`,\n/// or `<div>` with only text content). Use `baseline()` to set the baseline of\n/// containers that are flexbox or have non-flow content children.\n///\n/// @param {Number} $top - the distance from the top of the container to the\n///     text's baseline.\n/// @param {Number} $bottom - the distance from the text's baseline to the\n///     bottom of the container.\n/// @param {Boolean} $lineHeight - the line-height to use for the text. This\n///     is the distance between baselines of multiple lines of text.\n/// @param {String} $display - the display type of the container. May be `block`\n///     or `inline-block`.\n@mixin text-baseline(\n  $top: 0,\n  $bottom: 0,\n  $display: block,\n  $lineHeight: normal,\n  $query: feature-targeting-functions.all()\n) {\n  $validDisplayTypes: (block, inline-block);\n\n  @if list.index($validDisplayTypes, $display) == null {\n    @error \"mdc-typography: invalid display specified! #{$display} must be one of #{$validDisplayTypes}\";\n  }\n\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  @include baseline(\n    $display: $display,\n    $top: $top,\n    $bottom: $bottom,\n    $query: $query\n  );\n  @include feature-targeting-mixins.targets($feat-structure) {\n    @if $top > 0 {\n      margin-top: 0;\n      /* @alternate */\n      line-height: #{$lineHeight};\n    }\n\n    @if $bottom > 0 {\n      margin-bottom: -1 * $bottom;\n    }\n  }\n}\n\n/// Creates a baseline strut from the top of a container. This mixin is for\n/// advanced users, prefer `baseline()`.\n///\n/// @param {Number} $distance - The distance from the top of the container to\n///     the text's baseline.\n@mixin baseline-top($distance, $query: feature-targeting-functions.all()) {\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  &::before {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      @include baseline-strut_($distance);\n\n      vertical-align: 0;\n    }\n  }\n}\n\n/// Creates a baseline strut from the baseline to the bottom of a container.\n/// This mixin is for advanced users, prefer `baseline()`.\n///\n/// @param {Number} $distance - The distance from the text's baseline to the\n///     bottom of the container.\n@mixin baseline-bottom($distance, $query: feature-targeting-functions.all()) {\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  &::after {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      @include baseline-strut_($distance);\n\n      vertical-align: -1 * $distance;\n    }\n  }\n}\n\n/// Adds an invisible, zero-width prefix to a container's text.\n/// This ensures that the baseline is always where the text would be, instead\n/// of defaulting to the container bottom when text is empty. Do not use this\n/// mixin if the `baseline` mixin is already applied.\n@mixin zero-width-prefix($query: feature-targeting-functions.all()) {\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  &::before {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      content: '\\200b';\n    }\n  }\n}\n\n@mixin baseline-strut_($distance) {\n  display: inline-block;\n  width: 0;\n  height: $distance;\n  content: '';\n}\n","//\n// Copyright 2020 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n@use 'sass:map';\n@use './gss';\n\n/// When true, add an additional property/value declaration before declarations\n/// that use advanced features such as custom properties or CSS functions. This\n/// adds fallback support for older browsers such as IE11 that do not support\n/// these features at the cost of additional CSS. Set this variable to false to\n/// disable generating fallback declarations.\n$enable-fallback-declarations: true !default;\n\n/// Writes a CSS property/value declaration. This mixin is used throughout the\n/// theme package for consistency for dynamically setting CSS property values.\n///\n/// This mixin may optionally take a fallback value. For advanced features such\n/// as custom properties or CSS functions like min and max, a fallback value is\n/// recommended to support older browsers.\n///\n/// @param {String} $property - The CSS property of the declaration.\n/// @param {*} $value - The value of the CSS declaration. The value should be\n///     resolved by other theme functions first (i.e. custom property Maps and\n///     Material theme keys are not supported in this mixin). If the value is\n///     null, no declarations will be emitted.\n/// @param {*} $fallback - An optional fallback value for older browsers. If\n///     provided, a second property/value declaration will be added before the\n///     main property/value declaration.\n/// @param {Map} $gss - An optional Map of GSS annotations to add.\n/// @param {Bool} $important - If true, add `!important` to the declaration.\n@mixin declaration(\n  $property,\n  $value,\n  $fallback-value: null,\n  $gss: (),\n  $important: false\n) {\n  // Normally setting a null value to a property will not emit CSS, so mixins\n  // wouldn't need to check this. However, Sass will throw an error if the\n  // interpolated property is a custom property.\n  @if $value != null {\n    $important-rule: if($important, '!important', '');\n\n    @if $fallback-value and $enable-fallback-declarations {\n      @include gss.annotate($gss);\n      #{$property}: #{$fallback-value} #{$important-rule};\n\n      // Add @alternate to annotations.\n      $gss: map.merge(\n        $gss,\n        (\n          alternate: true,\n        )\n      );\n    }\n\n    @include gss.annotate($gss);\n    #{$property}: #{$value} #{$important-rule};\n  }\n}\n","// @import url(https://unpkg.com/@material/typography@7.0.0/dist/mdc.typography.css);\n// @use \"https://unpkg.com/@material/typography@7.0.0/dist/mdc.typography.css\";\n// @use \"test.scss\";\n@use \"@material/typography/mdc-typography\";\n\n// @use \"./node_modules/@material/typography/mdc-typography.scss\";\n\n// @use \"@material/typography/mdc-typography\";\n\nhtml {\n  --mdc-theme-primary: black;\n  --mdc-typography-font-family: \"Roboto\", sans-serif;\n}\n\nbody {\n  margin: 0px;\n  font-family: Roboto, sans-serif;\n}\n\na {\n  text-decoration: none;\n}\n\n\n.hme-list-aligned {\n  padding-left: 20px;\n  padding-right: 20px;\n}\n\n.hme-list__heading {\n  @extend .mdc-typography--subtitle2;\n  @extend .hme-list-aligned;\n  margin-bottom: 0;\n}\n\n.hme-intro {\n  padding-top: 5rem;\n  padding-bottom: 5rem;\n  text-align: center;\n}\n\n\nmwc-tab-bar {\n  --mdc-theme-primary: white;\n\n  --mdc-text-transform: none;\n  --mdc-typography-button-text-transform: none;\n\n  --mdc-tab-text-label-color-default: rgba(255, 255, 255, 0.7);\n  background-color: black;\n}\n\n.hme-content-wrapper {\n  margin: 0 auto;\n  max-width: 450px;\n}\n\n.hme-tab-section {\n  padding-top: 2rem;\n}\n\n.hme-tab-section__title {\n  // @extend .mdc-typography--subtitle1;\n  @extend .mdc-typography--headline6;\n  @extend .hme-list-aligned;\n  margin: 1rem 0;\n  // margin-bottom: 2rem;\n  // font-weight: 500;\n}\n\n.hme-tab-section__title + .hme-list__heading {\n  margin-top: 2.5rem;\n}"]}